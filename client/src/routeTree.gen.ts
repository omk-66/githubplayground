/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as websiteLayoutImport } from './routes/(website)/_layout'
import { Route as websiteLayoutIndexImport } from './routes/(website)/_layout/index'
import { Route as websiteLayoutContectImport } from './routes/(website)/_layout/contect'
import { Route as websiteLayoutAboutImport } from './routes/(website)/_layout/about'

// Create Virtual Routes

const websiteImport = createFileRoute('/(website)')()

// Create/Update Routes

const websiteRoute = websiteImport.update({
  id: '/(website)',
  getParentRoute: () => rootRoute,
} as any)

const websiteLayoutRoute = websiteLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => websiteRoute,
} as any)

const websiteLayoutIndexRoute = websiteLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => websiteLayoutRoute,
} as any)

const websiteLayoutContectRoute = websiteLayoutContectImport.update({
  id: '/contect',
  path: '/contect',
  getParentRoute: () => websiteLayoutRoute,
} as any)

const websiteLayoutAboutRoute = websiteLayoutAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => websiteLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(website)': {
      id: '/(website)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof websiteImport
      parentRoute: typeof rootRoute
    }
    '/(website)/_layout': {
      id: '/(website)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof websiteLayoutImport
      parentRoute: typeof websiteRoute
    }
    '/(website)/_layout/about': {
      id: '/(website)/_layout/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof websiteLayoutAboutImport
      parentRoute: typeof websiteLayoutImport
    }
    '/(website)/_layout/contect': {
      id: '/(website)/_layout/contect'
      path: '/contect'
      fullPath: '/contect'
      preLoaderRoute: typeof websiteLayoutContectImport
      parentRoute: typeof websiteLayoutImport
    }
    '/(website)/_layout/': {
      id: '/(website)/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof websiteLayoutIndexImport
      parentRoute: typeof websiteLayoutImport
    }
  }
}

// Create and export the route tree

interface websiteLayoutRouteChildren {
  websiteLayoutAboutRoute: typeof websiteLayoutAboutRoute
  websiteLayoutContectRoute: typeof websiteLayoutContectRoute
  websiteLayoutIndexRoute: typeof websiteLayoutIndexRoute
}

const websiteLayoutRouteChildren: websiteLayoutRouteChildren = {
  websiteLayoutAboutRoute: websiteLayoutAboutRoute,
  websiteLayoutContectRoute: websiteLayoutContectRoute,
  websiteLayoutIndexRoute: websiteLayoutIndexRoute,
}

const websiteLayoutRouteWithChildren = websiteLayoutRoute._addFileChildren(
  websiteLayoutRouteChildren,
)

interface websiteRouteChildren {
  websiteLayoutRoute: typeof websiteLayoutRouteWithChildren
}

const websiteRouteChildren: websiteRouteChildren = {
  websiteLayoutRoute: websiteLayoutRouteWithChildren,
}

const websiteRouteWithChildren =
  websiteRoute._addFileChildren(websiteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof websiteLayoutIndexRoute
  '/about': typeof websiteLayoutAboutRoute
  '/contect': typeof websiteLayoutContectRoute
}

export interface FileRoutesByTo {
  '/about': typeof websiteLayoutAboutRoute
  '/contect': typeof websiteLayoutContectRoute
  '/': typeof websiteLayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(website)': typeof websiteRouteWithChildren
  '/(website)/_layout': typeof websiteLayoutRouteWithChildren
  '/(website)/_layout/about': typeof websiteLayoutAboutRoute
  '/(website)/_layout/contect': typeof websiteLayoutContectRoute
  '/(website)/_layout/': typeof websiteLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/contect'
  fileRoutesByTo: FileRoutesByTo
  to: '/about' | '/contect' | '/'
  id:
    | '__root__'
    | '/(website)'
    | '/(website)/_layout'
    | '/(website)/_layout/about'
    | '/(website)/_layout/contect'
    | '/(website)/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  websiteRoute: typeof websiteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  websiteRoute: websiteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(website)"
      ]
    },
    "/(website)": {
      "filePath": "(website)",
      "children": [
        "/(website)/_layout"
      ]
    },
    "/(website)/_layout": {
      "filePath": "(website)/_layout.tsx",
      "parent": "/(website)",
      "children": [
        "/(website)/_layout/about",
        "/(website)/_layout/contect",
        "/(website)/_layout/"
      ]
    },
    "/(website)/_layout/about": {
      "filePath": "(website)/_layout/about.tsx",
      "parent": "/(website)/_layout"
    },
    "/(website)/_layout/contect": {
      "filePath": "(website)/_layout/contect.tsx",
      "parent": "/(website)/_layout"
    },
    "/(website)/_layout/": {
      "filePath": "(website)/_layout/index.tsx",
      "parent": "/(website)/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
